use crate::{get_mappings, render_template, AppInfo, Error, GenerateResults, Result};
use chrono::Utc;
use duct::cmd;
use rrgen::RRgen;
use serde_json::json;
use std::path::Path;
use std::{collections::HashMap, env::current_dir};

/// skipping some fields from the generated models.
/// For example, the `created_at` and `updated_at` fields are automatically
/// generated by the Loco app and should be given
pub const IGNORE_FIELDS: &[&str] = &["created_at", "updated_at", "create_at", "update_at"];

/// columns are <name>, <dbtype>: ("content", "string")
/// references are <to table, id col in from table>: ("user", `user_id`)
///  parsed from e.g.: model article content:string user:references
///  puts a `user_id` in articles, then fk to users
#[allow(clippy::type_complexity)]
pub fn get_columns_and_references(
    fields: &[(String, String)],
) -> Result<(Vec<(String, String)>, Vec<(String, String)>)> {
    let mut columns = Vec::new();
    let mut references = Vec::new();
    for (fname, ftype) in fields {
        if IGNORE_FIELDS.contains(&fname.as_str()) {
            tracing::warn!(
                field = fname,
                "note that a redundant field was specified, it is already generated automatically"
            );
            continue;
        }
        if ftype == "references" {
            let fkey = format!("{fname}_id");
            columns.push((fkey.clone(), "integer".to_string()));
            // user, user_id
            references.push((fname.to_string(), fkey));
        } else if let Some(refname) = ftype.strip_prefix("references:") {
            let fkey = format!("{fname}_id");
            columns.push((fkey.clone(), "integer".to_string()));
            references.push((refname.to_string(), fkey));
        } else {
            let mappings = get_mappings();
            let schema_type = mappings.schema_field(ftype.as_str()).ok_or_else(|| {
                Error::Message(format!(
                    "type: {} not found. try any of: {:?}",
                    ftype,
                    mappings.schema_fields()
                ))
            })?;
            columns.push((fname.to_string(), schema_type.to_string()));
        }
    }
    Ok((columns, references))
}

pub fn generate(
    rrgen: &RRgen,
    name: &str,
    is_link: bool,
    fields: &[(String, String)],
    appinfo: &AppInfo,
) -> Result<GenerateResults> {
    let pkg_name: &str = &appinfo.app_name;
    let ts = Utc::now();

    let (columns, references) = get_columns_and_references(fields)?;

    let vars = json!({"name": name, "ts": ts, "pkg_name": pkg_name, "is_link": is_link, "columns": columns, "references": references});
    let gen_result = render_template(rrgen, Path::new("model"), &vars)?;

    if std::env::var("SKIP_MIGRATION").is_err() {
        // generate the model files by migrating and re-running seaorm
        let cwd = current_dir()?;
        let env_map: HashMap<_, _> = std::env::vars().collect();

        let _ = cmd!("cargo", "loco-tool", "db", "migrate",)
            .stderr_to_stdout()
            .dir(cwd.as_path())
            .full_env(&env_map)
            .run()
            .map_err(|err| {
                Error::Message(format!(
                    "failed to run loco db migration. error details: `{err}`",
                ))
            })?;
        let _ = cmd!("cargo", "loco-tool", "db", "entities",)
            .stderr_to_stdout()
            .dir(cwd.as_path())
            .full_env(&env_map)
            .run()
            .map_err(|err| {
                Error::Message(format!(
                    "failed to run loco db entities. error details: `{err}`",
                ))
            })?;
    }

    Ok(gen_result)
}
