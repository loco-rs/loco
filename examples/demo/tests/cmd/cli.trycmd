```console
$ demo_app-cli 
? 2
The one-person framework for Rust

Usage: demo_app-cli [OPTIONS] <COMMAND>

Commands:
  start       Start an app
  db          Perform DB operations
  routes      Describe all application endpoints
  middleware  Describe all application middlewares
  task        Run a custom task
  jobs        Managing jobs queue
  scheduler   Run the scheduler
  generate    code generation creates a set of files and code templates based on a predefined set of rules
  doctor      Validate and diagnose configurations
  version     Display the app version
  watch       Watch and restart the app
  help        Print this message or the help of the given subcommand(s)

Options:
  -e, --environment <ENVIRONMENT>  Specify the environment [default: development]
  -h, --help                       Print help
  -V, --version                    Print version

```

```console 
$ demo_app-cli db
? 2
Perform DB operations

Usage: demo_app-cli db [OPTIONS] <COMMAND>

Commands:
  create    Create schema
  migrate   Migrate schema (up)
  down      Run one down migration, or add a number to run multiple down migrations (i.e. `down 2`)
  reset     Drop all tables, then reapply all migrations
  status    Migration status
  entities  Generate entity .rs files from database schema
  truncate  Truncate data in tables (without dropping)
  seed      Seed your database with initial data or dump tables to files
  schema    Dump database schema
  help      Print this message or the help of the given subcommand(s)

Options:
  -e, --environment <ENVIRONMENT>  Specify the environment [default: development]
  -h, --help                       Print help
  -V, --version                    Print version

```

```console
$ demo_app-cli generate
? 2
code generation creates a set of files and code templates based on a predefined set of rules

Usage: demo_app-cli generate [OPTIONS] <COMMAND>

Commands:
  model       Generates a new model file for defining the data structure of your application, and test file logic
  migration   Generates a new migration file
  scaffold    Generates a CRUD scaffold, model and controller
  controller  Generate a new controller with the given controller name, and test file
  task        Generate a Task based on the given name
  scheduler   Generate a scheduler jobs configuration template
  worker      Generate worker
  mailer      Generate mailer
  deployment  Generate a deployment infrastructure
  override    Override templates and allows you to take control of them. You can always go back when deleting the local template
  help        Print this message or the help of the given subcommand(s)

Options:
  -e, --environment <ENVIRONMENT>  Specify the environment [default: development]
  -h, --help                       Print help
  -V, --version                    Print version

```

```console 
$ LOCO_ENV=test demo_app-cli task
foo                           [run foo task]
seed_data                     [Task for seeding data]
user_report                   [output a user report]

```

```console
$ demo_app-cli routes --environment test
/_health
  â””â”€ GET	/_health
/_ping
  â””â”€ GET	/_ping
/auth
  â”œâ”€ POST	/auth/forgot
  â”œâ”€ POST	/auth/login
  â”œâ”€ POST	/auth/register
  â”œâ”€ POST	/auth/reset
  â””â”€ POST	/auth/verify
/cache
  â”œâ”€ GET	/cache
  â”œâ”€ GET	/cache/get_or_insert
  â””â”€ POST	/cache/insert
/mylayer
  â”œâ”€ GET	/mylayer/admin
  â”œâ”€ GET	/mylayer/echo
  â””â”€ GET	/mylayer/user
/mysession
  â””â”€ GET	/mysession
/notes
  â”œâ”€ GET	/notes
  â”‚  POST	/notes
  â”‚
  â”œâ”€ GET	/notes/{id}
  â”‚  POST	/notes/{id}
  â””â”€ DELETE	/notes/{id}
/response
  â”œâ”€ GET	/response/album
  â”œâ”€ GET	/response/empty
  â”œâ”€ GET	/response/empty_json
  â”œâ”€ GET	/response/etag
  â”œâ”€ GET	/response/html
  â”œâ”€ GET	/response/json
  â”œâ”€ GET	/response/redirect
  â”œâ”€ GET	/response/render_with_status_code
  â”œâ”€ GET	/response/set_cookie
  â””â”€ GET	/response/text
/upload
  â””â”€ POST	/upload/file
/user
  â”œâ”€ POST	/user/convert/admin
  â”œâ”€ POST	/user/convert/user
  â”œâ”€ GET	/user/current
  â””â”€ GET	/user/current_api_key
/view-engine
  â”œâ”€ GET	/view-engine/hello
  â”œâ”€ GET	/view-engine/home
  â””â”€ GET	/view-engine/simple

```

```console 
$ demo_app-cli doctor
[..][0m [34mDEBUG[0m [1mapp[0m: [2mloco_rs::bgworker[0m[2m:[0m job queue ping requested [2m[3menvironment[0m[2m=[0mdevelopment[0m
âœ… SeaORM CLI is installed
âœ… DB connection: success
âœ… redis queue: queue connection: success
âœ… Dependencies
âœ… Loco version: latest

```

```console 
$ LOCO_ENV=test demo_app-cli db reset

```
